# syntax = docker/dockerfile:1.4.0

FROM docker.io/bitnamilegacy/spark:3.4 as spark

FROM node:latest as node

COPY . /app
RUN npm install apidoc -g

WORKDIR /app/src/RestApi
RUN apidoc -i . -o ../../doc_build


FROM python:3.9.17-bullseye

ENV SPARK_HOME /opt/bitnami/spark
COPY --from=spark $SPARK_HOME $SPARK_HOME

ARG TARGETARCH
ENV DEBIAN_FRONTEND noninteractive
ENV ELASTICTM /opt/elastictm
ENV ELASTICTM_VOLUME /elastictm
ENV GUNICORN_WORKERS 4
VOLUME $ELASTICTM_VOLUME

COPY --from=node /app $ELASTICTM
WORKDIR $ELASTICTM

## LEGACY: The volume at /elastictm and the logs contained in it appear to never get used/modified.
#RUN mkdir -p $ELASTICTM_VOLUME/log/elastictm && \
#    touch $ELASTICTM_VOLUME/log/elastictm/gunicorn.log $ELASTICTM_VOLUME/log/elastictm/celery-worker.log && \
#    chmod -R oag+w $ELASTICTM_VOLUME/log/elastictm
## LEGACY: Due to the log files remaining empty, Logrotate will be passive in the container.
#RUN ln -s conf/logrotate.conf /etc/logrotate.d/activatm
#
## Create directory/files for Gunicorn logs
#WORKDIR $ELASTICTM/log
#RUN chmod 777 . && \
#    touch gunicorn.log && \
#    chmod 666 gunicorn.log

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      libboost-all-dev \
      libtercpp-dev \
      ruby \
      ruby-dev \
      zip \
      # LEGACY: The following packages MIGHT not be needed.
      # Either (a) theyâ€™re installed in the base image or (b) the application does not explicitly use them.
      apt-transport-https \
      apt-utils \
      build-essential \
      curl \
      default-jdk \
      default-jre \
      gfortran \
      git \
      iputils-ping \
      libatlas-base-dev \
      libblas-dev \
      libcurl4-openssl-dev \
      liblapack-dev \
      libssl-dev \
      libxml2-dev \
      libxslt1-dev \
      logrotate \
      nano \
      python3-bs4 \
      python3-matplotlib \
      python3-nose \
      python3-numpy \
      python3-pandas \
      python3-pip \
      python3-scipy \
      python3-sympy \
      software-properties-common \
      wget=1.21-1+deb11u1

# LEGACY: The rubygem seems never used -- instead, source code from tools/pragmatic_segmenter-master is executed.
RUN gem install pragmatic_segmenter -v 0.3.23

# Download and install Kytea
WORKDIR /tmp
COPY ./tools/kytea/kytea-0.4.7.tar.gz .
RUN tar -xzf kytea-0.4.7.tar.gz
#RUN wget https://www.phontron.com/kytea/download/kytea-0.4.7.tar.gz && \
#    # TODO: Verify checksum before continuing?
#    tar -xzf kytea-0.4.7.tar.gz
WORKDIR /tmp/kytea-0.4.7
RUN if [ "$TARGETARCH" = "arm64" ] || [ "$TARGETARCH" = "arm32" ]; \
        then ./configure --build=aarch64-unknown-linux-gnu; \
        else ./configure; \
    fi && \
    make && \
    make install && \
    ldconfig

# Install Python dependencies
WORKDIR $ELASTICTM
RUN pip install --no-cache-dir -r requirements.txt

# If running on ARM architecture, download, build and install Mykytea-python from source (see https://github.com/chezou/Mykytea-python/pull/24)
WORKDIR /tmp/Mykytea-python
RUN if [ "$TARGETARCH" = "arm64" ] || [ "$TARGETARCH" = "arm32" ]; \
        then \
            apt-get install -y --no-install-recommends swig && \
            git clone https://github.com/chezou/Mykytea-python.git . && \
            git checkout 3a2818e && \
            # TODO: Verify checksum before continuing?
            make && \
            make install; \
    fi

# Download universal POS tagset
RUN python -m nltk.downloader -d /usr/share/nltk_data universal_tagset stopwords punkt

# Copy universal tag map to NTLK data directory
COPY tools/universal-pos-tags-master/*-treetagger-pg.map /usr/share/nltk_data/taggers/universal_tagset/

# Download, build and install Tercpp with custom monkey patching
WORKDIR $ELASTICTM/tools/pytercpp
COPY tools/pytercpp .
RUN git clone https://github.com/cservan/tercpp.git && \
    git -C tercpp checkout cef1e60 && \
    # TODO: Verify checksum before continuing?
    python setup.py build install

RUN touch ${ELASTICTM}/run-webserver.sh
RUN chmod +x ${ELASTICTM}/run-webserver.sh
RUN <<EOF cat > ${ELASTICTM}/run-webserver.sh
#!/bin/sh
set -e
cd ${ELASTICTM}/src

USER=www-data
COMMAND="flask --app RestApi.Api run --host=0.0.0.0 \$@"
su \$USER -s /bin/sh -c "\$COMMAND"
EOF

RUN touch ${ELASTICTM}/run-celery.sh
RUN chmod +x ${ELASTICTM}/run-celery.sh
RUN <<EOF cat > ${ELASTICTM}/run-celery.sh
#!/bin/sh
set -e
cd ${ELASTICTM}/src

USER=www-data
COMMAND="celery --app RestApi.Celery.main_celery worker \$@"
su \$USER -s /bin/sh -c "\$COMMAND"
EOF

RUN touch ${ELASTICTM}/run-shell.sh
RUN chmod +x ${ELASTICTM}/run-shell.sh
RUN <<EOF cat > ${ELASTICTM}/run-shell.sh
#!/bin/sh
set -e
cd ${ELASTICTM}/src

USER=www-data
COMMAND="flask --app RestApi.Api shell"
su \$USER -s /bin/sh -c "\$COMMAND"
EOF

WORKDIR $ELASTICTM
CMD ["sleep", "infinity"]
